'use strict';

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var currify = require('currify/legacy');

var query = function query(a) {
  return document.querySelector("[data-name=\"".concat(a, "\"]"));
};

var setAttribute = currify(function (el, obj, name) {
  return el.setAttribute(name, obj[name]);
});
var set = currify(function (el, obj, name) {
  return el[name] = obj[name];
});
var not = currify(function (f, a) {
  return !f(a);
});

var isCamelCase = function isCamelCase(a) {
  return a != a.toLowerCase();
};

module.exports = function (name) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var dataName = options.dataName,
      notAppend = options.notAppend,
      _options$parent = options.parent,
      parent = _options$parent === void 0 ? document.body : _options$parent,
      _options$uniq = options.uniq,
      uniq = _options$uniq === void 0 ? true : _options$uniq,
      restOptions = _objectWithoutProperties(options, ["dataName", "notAppend", "parent", "uniq"]);

  var elFound = isElementPresent(dataName);
  if (uniq && elFound) return elFound;
  var el = document.createElement(name);
  if (dataName) el.dataset.name = dataName;
  Object.keys(restOptions).filter(isCamelCase).map(set(el, options));
  Object.keys(restOptions).filter(not(isCamelCase)).map(setAttribute(el, options));
  if (!notAppend) parent.appendChild(el);
  return el;
};

module.exports.isElementPresent = isElementPresent;

function isElementPresent(dataName) {
  if (!dataName) return;
  return query(dataName);
}